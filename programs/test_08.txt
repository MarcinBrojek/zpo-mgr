@syntax(sp){sp: e | t}

@syntax(n){n: I}
@syntax(x){x: "*"ID}

@syntax(t){t: /unit/ | /int/ | t /->/ t}

@syntax(e4){e.4: n}
@syntax(e3){e.3: x}
@syntax(e2){e.2: e /\(/ e /\)/}
@syntax(e1){e.1: e /\+/ e}
@syntax(e0){e.0: /lam/ x ":" t "." e /mal/}

@typing(te1){
    ---
    @G |- `@n` : `int`
}

@typing(te2){
    lookuptype(@G, `@x` | `@t`, `1`)
    ---
    @G |- `@x` : `@t`
}

@typing(te3){
    @G |- `@e_1` : `int`
    @G |- `@e_2` : `int`
    ---
    @G |- `@e_1 + @e_2` : `int`
}

@typing(te5){
    @G |- `@e_1` : `@t_1 -> @t_2`
    @G |- `@e_2` : `@t_1`
    ---
    @G |- `@e_1 (@e_2)` : `@t_2`
}

@typing(te6){
    saveintype(@G_1, `@x`, `@t_1` | @G_2)
    @G_2 |- `@e` : `@t_2`
    ---
    @G_1 |- `lam @x : @t_1 . @e mal` : `@t_1 -> @t_2`
}

@typing(te4){
    @G |- `@e` : `@t`
    ---
    @G |- `@e` : `unit`
}

@semantics(oe1){
    sum(`@n_1`, `@n_2` | `@n_3`)
    ---
    <`@n_1 + @n_2`, @s> => <`@n_3`, @s>
}

@semantics(oe2){
    <`@e_1`, @s> => <`@e_3`, @s>
    ---
    <`@e_1 + @e_2`, @s> => <`@e_3 + @e_2`, @s>
}

@semantics(oe3){
    <`@e_1`, @s> => <`@e_2`, @s>
    ---
    <`@n + @e_1`, @s> => <`@n + @e_2`, @s>
}

@semantics(oe4){
    lookup(@s, `@x` | `@n`, `1`)
    ---
    <`@x`, @s> => <`@n`, @s>
}

@semantics(oe5){
    <`@e_1`, @s> => <`@e_3`, @s>
    ---
    <`@e_1(@e_2)`, @s> => <`@e_3(@e_2)`, @s>
}

@semantics(oe6){
    <`@e_2`, @s> => <`@e_3`, @s>
    ---
    <`@e_1(@e_2)`, @s> => <`@e_1(@e_3)`, @s>
}

@semantics(oe7){
    savein(@s_1, `@x`, `@n`, `@t` | @s_2)
    ---
    <`lam @x : @t . @e mal(@n)`, @s_1> => <`@e`, @s_2>
}

sum(`@n_1`, `@n_2` | `@n_3`)`
n_3 = [n_1[0] + n_2[0]]
`

lookup(@s, `@x` | `@n`, `@n_1`)`
if x[0] in s[1]:
    n = [s[1][x[0]]]
    n_1 = [1]
else:
    n = n_1 = [0]
`

savein(@s_1, `@x`, `@n`, `@t` | @s_2)`
s_2 = s_1
s_2[0][x[0]] = t[0]
s_2[1][x[0]] = n[0]
`

lookuptype(@G, `@x` | `@t`, `@n`)`
if x[0] in G:
    t = [G[x[0]]]
    n = [1]
else:
    t = n = [0]
`

saveintype(@G_1, `@x`, `@t` | @G_2)`
G_2 = G_1
G_2[x[0]] = t[0]
`

@semantics(oend){
    ---
    <`@n`, @s> => @s
}

@code`lam *z : int . *z + 2 mal (2)`

@code`lam *y : int . *y + *y + 4 mal (3)`

@code`2 + 3 + 4 + 5`

@code`lam *z : int . *z + 40 mal (0) + 2`